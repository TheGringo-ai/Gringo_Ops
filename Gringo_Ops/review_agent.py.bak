import argparse
import subprocess
import sys
from pathlib import Path

# Ensure the tools directory is in the Python path
# This allows us to import the scanner and analyzer modules
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

from tools.project_scanner import get_project_files
from tools.code_analyzer import CodeAnalyzer
from tools.code_fixer import CodeFixer
from tools.patch_writer import PatchWriter

EXCLUDED_PATHS = [
    'node_modules', '.venv', '__pycache__', '.git',
    'dist', 'build', 'coverage', '.mypy_cache'
]

ALLOWED_EXTENSIONS = ['.py', '.yaml', '.yml', '.json', '.toml', '.md', '.env']

class ReviewAgent:
    """
    An agent that orchestrates a full project review by scanning files,
    running them through an analysis engine, and optionally fixing them.
    """
    def __init__(self, project_root, auto_fix=False, validate=False, interactive=False):
        self.project_root = Path(project_root).resolve()
        self.auto_fix = auto_fix
        self.validate = validate
        self.interactive = interactive
        if not self.project_root.is_dir():
            raise FileNotFoundError(f"The specified project root does not exist or is not a directory: {self.project_root}")

    def run_review(self):
        """
        Executes the end-to-end review process.
        """
        print(f"[Review Agent] Starting review for project: {self.project_root}")

        # 1. Scan the project to get all relevant files
        project_files = self._get_filtered_project_files(self.project_root)

        # 2. Analyze the files for potential issues
        analyzer = CodeAnalyzer(project_files)
        report = analyzer.run_analysis()
        analyzer.save_report(self.project_root / "code_analysis_report.json")

        # 3. Print the final summary report to the console
        if not report:
            print("\n[Review Agent] ‚ú® No issues found. The project looks clean! ‚ú®")
            return

        print("\n--- üïµÔ∏è GringoOps Analysis Report üïµÔ∏è ---")
        for file, issues in report.items():
            relative_path = Path(file).relative_to(self.project_root)
            print(f"\nüìÑ File: {relative_path}")
            for issue in issues:
                print(f"   - {issue}")
        print("\n--------------------------------------")
        print(f"[Review Agent] Review complete. Report saved to {self.project_root / 'code_analysis_report.json'}")

        if self.auto_fix:
            self.run_autofix(report)

    def _get_filtered_project_files(self, path):
        """
        Recursively gets all files in a directory, filtering by extension and excluded paths.
        """
        all_files = get_project_files(path)
        filtered_files = []
        for file in all_files:
            if any(excluded in file for excluded in EXCLUDED_PATHS):
                continue
            if Path(file).suffix in ALLOWED_EXTENSIONS:
                filtered_files.append(file)
        return filtered_files

    def run_autofix(self, report):
        """
        Runs the auto-fixing process based on the analysis report.
        """
        print("\n--- ü§ñ GringoOps Auto-Fix Agent ü§ñ ---")
        fixer = CodeFixer(report)
        fixes = fixer.generate_fixes()

        if not fixes:
            print("[Auto-Fix] No actionable fixes could be generated.")
            return

        patch_writer = PatchWriter(fixes)
        patch_writer.apply_patches(dry_run=not self.auto_fix, interactive=self.interactive)

        if self.validate:
            self.run_validation()

    def run_validation(self):
        """
        Runs post-patch validation using black, ruff, and pytest.
        """
        print("\n--- VALIDATING PATCHES ---")
        try:
            subprocess.run(["ruff", "check", ".", "--fix"], check=True)
            subprocess.run(["black", "."], check=True)
            subprocess.run(["pytest"], check=True)
            print("\n--- ‚úÖ VALIDATION SUCCESSFUL ‚úÖ ---")
        except subprocess.CalledProcessError as e:
            print(f"\n--- ‚ùå VALIDATION FAILED: {e} ‚ùå ---")
            # Here you would implement rollback logic

def main():
    parser = argparse.ArgumentParser(description="GringoOps - Automated Code Review Agent")
    parser.add_argument(
        "--path",
        default=".",
        help="The root path of the project you want to review. Defaults to the current directory."
    )
    parser.add_argument("--auto-fix", action="store_true", help="Automatically apply suggested fixes.")
    parser.add_argument("--validate", action="store_true", help="Run validation after applying fixes.")
    parser.add_argument("--interactive", action="store_true", help="Prompt for confirmation before each patch.")
    args = parser.parse_args()

    try:
        agent = ReviewAgent(args.path, args.auto_fix, args.validate, args.interactive)
        agent.run_review()
    except FileNotFoundError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
