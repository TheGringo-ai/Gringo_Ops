The revised code is a definite improvement over a hypothetical original, addressing several key aspects of good coding practice. Here's a breakdown of the changes and some further suggestions:

**Strengths:**

* **Type Hinting:** Adding `-> str` to `_hash_of_file` significantly improves readability and helps catch potential errors early on.
* **Dynamic Algorithm Selection:** Using `hashlib.algorithms_available` makes the code more flexible and future-proof, avoiding the need for a hardcoded list of algorithms.
* **Clearer Error Message:**  Returning "File not found" is more informative than letting a potential exception propagate upwards.

**Areas for further improvement:**

* **More Robust Error Handling:** While catching `FileNotFoundError` is good, the current implementation only returns a string indicating the error.  This isn't very helpful for programmatic use.  It's better to raise an exception and let the calling function handle it.  Consider using a more specific exception type or re-raising the `FileNotFoundError`.

* **Context Manager for Hashing:** While not strictly necessary, you can slightly simplify the hashing logic by using `hash.hexdigest()` as a context manager (available in Python 3.8+).

* **Hashing Large Files in Chunks:** The use of `read_chunks` is excellent for handling potentially large files efficiently.

* **Consider `pbkdf2_hmac` (with caveats):**  While the suggestion to use `pbkdf2_hmac` is well-intentioned for security, it's essential to understand its purpose.  PBKDF2 is a *key derivation function*, designed to strengthen a *password* into a cryptographic key.  It's not a general-purpose hashing algorithm for file integrity checks.  If the goal is to verify file integrity, a standard cryptographic hash function (like SHA256) is sufficient and more appropriate.  PBKDF2 would add unnecessary overhead and complexity in this context.  Only use it if you're dealing with passwords or secrets that need to be stretched and strengthened.

* **Return Type for Error:**  The return type hint `-> str` is now inaccurate because the function can also return the string "File not found".  While not strictly a type error in Python, this could mislead users. A better approach would be to raise an exception in case of error, preserving the `str` return type hint for the hash digest itself.

**Suggested Revised `_hash_of_file` Function:**

```python
def _hash_of_file(path: str, algorithm: str) -> str:
    """Return the hash digest of a file."""
    try:
        with open(path, "rb") as archive:
            hasher = hashlib.new(algorithm)
            for chunk in read_chunks(archive):
                hasher.update(chunk)
            return hasher.hexdigest()  # Or with context manager if Python 3.8+:  with hasher: ... return hasher.hexdigest()
    except FileNotFoundError as e:
        raise FileNotFoundError(f"Could not hash file: {path}") from e  # Chain the exception for better debugging
```


By implementing these changes, you create more robust, efficient, and informative code.  The key takeaway regarding `pbkdf2_hmac` is to use the right tool for the job.  Standard hashing algorithms are perfectly suited for file integrity checks. Reserve PBKDF2 for password-related operations where key stretching is crucial.
