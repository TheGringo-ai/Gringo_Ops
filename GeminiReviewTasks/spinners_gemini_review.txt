The code looks pretty good overall, but here are a few suggestions:

* **More informative `NonInteractiveSpinner`:**  The `NonInteractiveSpinner` just logs "still running...". Consider including elapsed time in the log message to give a better sense of progress, especially since updates are infrequent.  Something like:  `"still running... (elapsed: {elapsed_time:.1f}s)"`.  You'd need to add a `start_time` attribute to the `NonInteractiveSpinner`.

* **Handle potential exceptions in `_write`:** The `_write` method of `InteractiveSpinner` could potentially raise exceptions (e.g., if writing to the file fails).  Wrapping it in a `try...except` block and perhaps logging the error would make it more robust.

* **Clarify `_finished` usage:**  The `_finished` flag is used to prevent further updates after `finish()` is called.  While the intent is clear, adding a comment explaining its purpose would improve readability.

* **Consider a dedicated exception:** Instead of finishing the spinner with "error" for any exception, consider creating a custom exception (e.g., `SpinnerError`) to signal errors specifically related to the spinner's operation.  This would allow calling code to distinguish between spinner-related errors and other exceptions.

* **Flexibility for `open_spinner`:** The `open_spinner` context manager assumes `sys.stdout.buffer`. Consider adding an optional `file` argument to allow writing to other streams.

* **Docstrings:** The code is missing docstrings.  Adding docstrings, especially to the classes and public functions, would significantly improve understandability and maintainability. Include information about the intended usage, arguments, and return values.

* **Unit tests:**  Adding unit tests would greatly improve the reliability of the code.  Test both the interactive and non-interactive spinners, including edge cases and error handling.

* **Type hint for `next(self._spin_cycle)`:** Even though mypy may infer it, explicitly type hinting the result of `next(self._spin_cycle)` in `InteractiveSpinner.spin()` as `str` would add clarity.


By implementing these suggestions, you can make the code more robust, user-friendly, and easier to maintain.
