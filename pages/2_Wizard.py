import streamlit as st
import os
import time
import openai
from FredFix.core.creator_agent import creator_agent
from tools import openai_review
# from plugins.autopatch import autopatch_run  # Removed unresolved import
from FredFix.wizard.wizard_logic import generate_code, review_file, apply_patch
from FredFix.wizard.wizard_state import init_history, save_prompt_log
import pdfkit

try:
    from streamlit_extras.switch_page_button import switch_page
except ImportError:
    def switch_page(page_name):
        st.session_state["_rerun_target"] = page_name
        st.experimental_rerun()

st.set_page_config(page_title="GringoOps AI Wizard", layout="wide")

st.info("🧙 Welcome to the GringoOps Wizard — no coding required. Just follow each step.")

theme_choice = st.sidebar.selectbox("🎨 Theme", ["GringoOps", "Dark", "Light"])
logo_map = {
    "GringoOps": "https://raw.githubusercontent.com/TheGringo-ai/GringoOps/main/assets/logo.png",
    "Dark": "https://raw.githubusercontent.com/TheGringo-ai/GringoOps/main/assets/logo_dark.png",
    "Light": "https://raw.githubusercontent.com/TheGringo-ai/GringoOps/main/assets/logo_light.png",
}
logo_url = logo_map.get(theme_choice, logo_map["GringoOps"])

plugin_choice = st.sidebar.selectbox("🧩 Load Plugin", ["None", "CreatorAgent", "FredFix", "BulletTrain"])
st.sidebar.write(f"📦 Loaded: {plugin_choice}")

# Setup
init_history()

if not os.path.exists("logs/generated"):
    os.makedirs("logs/generated")

st.markdown("<h1 style='text-align: center;'>🧠 GringoOps AI Wizard</h1>", unsafe_allow_html=True)
st.markdown("<hr>", unsafe_allow_html=True)

with st.sidebar:
    st.image(logo_url, width=200)
    st.markdown("### Tools")
    st.markdown("- 🧠 Code Generator\n- 🕵️ Review Bot\n- 🔧 AutoPatcher\n- 🚀 Deployment")
    st.markdown("---")
    if st.sidebar.button("⬅️ Back to Dashboard"):
        switch_page("dashboard")
    st.markdown("---")
    st.markdown("Built with ❤️ by Fred Taylor")

tab1, tab2, tab3, tab4 = st.tabs(["🧠 Generate", "🕵️ Review", "🔧 Patch", "💬 Assistant"])

with tab1:
    st.subheader("Step 1: Generate Python Code")
    default_prompts = {
        "Streamlit App": "Create a Streamlit dashboard to display sales data from a CSV file.",
        "FastAPI Server": "Build a FastAPI app with a /predict route and health check.",
        "Text Cleaner": "Write a Python script to clean and normalize messy text data."
    }
    template = st.selectbox("🔧 Choose Template", [""] + list(default_prompts.keys()))
    prompt = default_prompts.get(template, "")
    show_advanced = st.checkbox("👨‍💻 Show advanced options")
    if show_advanced:
        prompt = st.text_area("Prompt", value=prompt, height=150)
        filename = st.text_input("📄 Filename", value="generated_tool.py")
    else:
        prompt = st.selectbox("🧠 Pick a task", list(default_prompts.values()))
        filename = st.text_input("📄 Filename", value="autogenerated.py")


    uploaded_file = st.file_uploader("📤 Or upload a code file to review or scaffold", type="py")
    if uploaded_file is not None:
        uploaded_code = uploaded_file.read().decode("utf-8")
        st.text_area("📄 Uploaded Code", uploaded_code, height=300)
        if st.button("💡 Scaffold with Uploaded Code"):
            code = generate_code(uploaded_code)
            st.code(code, language="python")
            st.download_button("⬇️ Download Scaffolding", code, file_name="scaffolded_" + uploaded_file.name)
            save_prompt_log("Upload-based scaffold", uploaded_file.name)
            st.session_state["history"].append(f"Scaffolded from {uploaded_file.name}")

    if st.button("🤖 Interpret & Generate via Agent"):
        if prompt:
            st.write("📡 Sending idea to Agent...")
            interpreted_code = creator_agent().generate_from_idea(prompt)
            st.code(interpreted_code, language="python")
            st.download_button("⬇️ Download Interpreted Code", interpreted_code, file_name="interpreted_" + filename)
            st.success("Code interpreted and generated by Agent.")
            st.session_state["history"].append(f"Agent-generated from: {prompt}")

    if st.button("🧠 Generate Code"):
        if prompt and filename:
            code = generate_code(prompt)
            st.code(code, language="python")
            st.download_button("⬇️ Download Code", code, file_name=filename)
            st.success("Code generated and ready to download.")
            save_prompt_log(prompt, filename)
            st.session_state["history"].append(prompt)

    if st.session_state["history"]:
        st.markdown("### ✅ Your Completed Tasks")
        for i, prompt in enumerate(st.session_state["history"][::-1]):
            st.success(f"{len(st.session_state['history']) - i}. {prompt[:60]}...")

    if st.button("🧪 Generate Unit Test"):
        test_code = f'''
import unittest
from {filename.replace(".py", "")} import *

class TestGeneratedTool(unittest.TestCase):
    def test_placeholder(self):
        self.assertTrue(True)

if __name__ == "__main__":
    unittest.main()
'''
        st.download_button("⬇️ Download test_" + filename, test_code, file_name="test_" + filename)

with tab2:
    st.subheader("Step 2: Review Code with GPT")
    review_file_uploader = st.file_uploader("Upload file to review", type="py")
    if review_file_uploader and st.button("Run Review"):
        tmp_review_path = f"review_{int(time.time())}.py"
        with open(tmp_review_path, "wb") as f:
            f.write(review_file_uploader.read())
        review_result = review_file(tmp_review_path)
        st.text_area("📝 GPT Review", review_result, height=300)

with tab3:
    st.subheader("Step 3: AutoPatch Code")
    patch_file = st.file_uploader("Upload file to patch", type="py", key="patch")
    if patch_file and st.button("Apply Patch"):
        tmp_path = f"patch_{int(time.time())}.py"
        with open(tmp_path, "w") as f:
            f.write(patch_file.read().decode())
        patched = apply_patch(tmp_path)
        st.download_button("⬇️ Download Patched Code", patched, file_name="patched.py")
        st.success("AutoPatch complete.")

with tab4:
    st.subheader("🧠 Ask the GringoOps Assistant")
    example_qs = ["How do I build a FastAPI app?", "What's the best way to structure a Streamlit project?"]
    st.selectbox("💡 Example Questions", example_qs, key="example_q")
    chat_prompt = st.text_input("Ask a question (e.g. 'How do I use FastAPI with SQLite?')")

    if chat_prompt:
        with st.spinner("Thinking..."):
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a senior Python assistant for GringoOps."},
                    {"role": "user", "content": chat_prompt}
                ],
                stream=True
            )
            full_response = ""
            for chunk in response:
                if "choices" in chunk:
                    delta = chunk["choices"][0]["delta"]
                    if "content" in delta:
                        full_response += delta["content"]
                        st.write(delta["content"])
            st.text_area("💬 Full Response", full_response, height=300)

# --- Launch Summary / Export Section ---
tab5 = st.tabs(["📦 Launch Summary"])[0]
with tab5:
    st.subheader("📦 Export Project or Summary")

    if st.checkbox("📦 Confirm you're ready to export"):
        if st.button("Generate launch.sh"):
            launch_script = (
                "#!/bin/bash\n"
                "echo '🚀 Launching GringoOps Wizard'\n"
                "streamlit run wizard.py\n"
            )
            st.download_button("⬇️ Download launch.sh", launch_script, file_name="launch.sh")
        
        if st.button("Generate README.md"):
            readme = (
                "# GringoOps Wizard\n"
                "This tool supports:\n\n"
                "- 🧠 Code Generation\n"
                "- 🕵️ AI Code Review\n"
                "- 🔧 AutoPatch\n"
                "- 💬 Assistant Chat\n\n"
                "## How to Run\n"
                "```bash\n"
                "streamlit run wizard.py\n"
                "```\n"
            )
            st.download_button("⬇️ Download README.md", readme, file_name="README.md")

        if st.button("Export Summary to PDF"):
            prompt_history = st.session_state.get("history", [])
            full_html = f"""
            <html>
            <head><meta charset='UTF-8'><style>
                body {{ font-family: Arial, sans-serif; }}
                h1 {{ color: #2c3e50; }}
                code {{ background: #f4f4f4; padding: 5px; display: block; margin-bottom: 10px; }}
            </style></head>
            <body>
            <h1>GringoOps Wizard Report</h1>
            <p><b>Generated Modules:</b> {len(prompt_history)}</p>
            <ul>
            """
            for i, prompt in enumerate(prompt_history[::-1]):
                full_html += f"<li><b>Prompt {len(prompt_history)-i}:</b><br><code>{prompt}</code></li>"

            full_html += """
            </ul>
            </body>
            </html>
            """

            with open("wizard_summary.html", "w", encoding="utf-8") as f:
                f.write(full_html)

            pdfkit.from_file("wizard_summary.html", "wizard_summary.pdf")

            with open("wizard_summary.pdf", "rb") as pdf_file:
                st.download_button("⬇️ Download PDF", data=pdf_file, file_name="wizard_summary.pdf")

tab6 = st.tabs(["📊 Analytics"])[0]
with tab6:
    st.subheader("📊 Usage Analytics (Mockup)")
    st.write("Modules Generated:", len(st.session_state.get("history", [])))
    st.line_chart([1, 2, 3, 6, 10])  # Replace with real logs later